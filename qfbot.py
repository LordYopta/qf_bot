import logging
import random
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram.error import TelegramError
import os

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.environ.get('TELEGRAM_TOKEN', '7326557942:AAFjCHJWHq4_mUDDdqjMCrqgC-RzLb4Bo90')

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
BANNED_WORDS = ['—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–∞–º']

# –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã
RULES = """
*–ü—Ä–∞–≤–∏–ª–∞ QF Network* üìú
1. üö´ –ù–∏–∫–∞–∫–æ–≥–æ —Å–ø–∞–º–∞!
2. üîó –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ.
3. ü§ù –£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö.
4. üó£Ô∏è –ë–µ–∑ –º–∞—Ç–∞.
"""

warnings = {}
spam_count = {}
last_reset = {}
karma = {}
last_karma_update = {}
MAX_SPAM_PER_DAY = 2

DUEL_QUESTIONS = [
    {"question": "–ö–∞–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∑–∞–ø—Ä–µ—â–∞–µ—Ç —Å–ø–∞–º?", "options": [("A) –ü—Ä–∞–≤–∏–ª–æ 1", True), ("B) –ü—Ä–∞–≤–∏–ª–æ 2", False), ("C) –ü—Ä–∞–≤–∏–ª–æ 3", False)]},
    {"question": "–ß—Ç–æ –Ω–µ–ª—å–∑—è —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ?", "options": [("A) QF Network", False), ("B) –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã", True), ("C) –°–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", False)]}
]

logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —Å–ø–∞–º–∞
def get_spam_progress(count, max_count):
    filled = "‚ñà" * count
    empty = "‚ñë" * (max_count - count)
    return f"[{filled}{empty}] {count}/{max_count}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def init_user_data(user_id, current_time):
    if user_id not in spam_count:
        spam_count[user_id] = 0
        last_reset[user_id] = current_time
    if user_id not in karma:
        karma[user_id] = 0
        last_karma_update[user_id] = current_time

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async def greet_new_member(update: Update, context):
    message = update.message
    if message and message.new_chat_members:
        chat_id = update.effective_chat.id
        if 'chat_id' not in context.bot_data:
            context.bot_data['chat_id'] = chat_id
        current_time = int(time.time())
        for user in message.new_chat_members:
            logger.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user.first_name}")
            init_user_data(user.id, current_time)
            welcome_message = f"üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!* üéâ\n–ü—Ä–∞–≤–∏–ª–∞: /rules"
            msg = await context.bot.send_message(chat_id=chat_id, text=welcome_message, parse_mode='Markdown')
            context.job_queue.run_once(delete_message, 300, data={'chat_id': msg.chat_id, 'message_id': msg.message_id})

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
async def delete_message(context):
    job_data = context.job.data
    try:
        await context.bot.delete_message(chat_id=job_data['chat_id'], message_id=job_data['message_id'])
    except TelegramError as e:
        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /rules
async def rules(update: Update, context):
    await update.message.reply_text(RULES, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context):
    help_text = """
    ü§ñ *–ë–æ—Ç QF Network* ü§ñ
    üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–∏—á–∫–æ–≤.
    üö´ –£–¥–∞–ª—è–µ—Ç —Å–ø–∞–º:
      - 1-2 —Ä–∞–∑–∞: –º—É—Ç + –≤–æ–ø—Ä–æ—Å (‚úÖ —Å–Ω–∏–º–∞–µ—Ç).
      - 3-–π —Ä–∞–∑: üö® –º—É—Ç –Ω–∞ —Å—É—Ç–∫–∏.
    ‚ö†Ô∏è 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è = –±–∞–Ω.
    ‚≠ê *–ö–∞—Ä–º–∞*: +1/–¥–µ–Ω—å –±–µ–∑ —Å–ø–∞–º–∞, -1 –∑–∞ —Å–ø–∞–º.
    üîß */warn* (–∞–¥–º–∏–Ω—ã): –±–∞–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–∞.
    üì© */report*: —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ (–¥–ª—è –≤—Å–µ—Ö).
    üìä */karma*: –≤–∞—à–∞ –∫–∞—Ä–º–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–∞–¥–º–∏–Ω—ã).
    ‚ÑπÔ∏è */rules*: –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã.
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

# –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ —Å–ø–∞–º–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä–º—ã
async def reset_spam_count(context):
    current_time = int(time.time())
    chat_id = context.bot_data.get('chat_id')
    for user_id in list(spam_count.keys()):
        if current_time - last_reset.get(user_id, 0) >= 86400:
            spam_count[user_id] = 0
            last_reset[user_id] = current_time
            logger.info(f"–°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ —Å–ø–∞–º–∞ –¥–ª—è {user_id}")
    for user_id in list(karma.keys()):
        if current_time - last_karma_update.get(user_id, 0) >= 86400:
            karma[user_id] += 1
            last_karma_update[user_id] = current_time
    if current_time % (7 * 86400) < 86400 and chat_id:
        top_user = max(karma.items(), key=lambda x: x[1], default=(None, 0))
        flop_user = min(karma.items(), key=lambda x: x[1], default=(None, 0))
        if top_user[0] and flop_user[0]:
            top_name = (await context.bot.get_chat_member(chat_id, top_user[0])).user.first_name
            flop_name = (await context.bot.get_chat_member(chat_id, flop_user[0])).user.first_name
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"üèÜ *–ì–µ—Ä–æ–π –Ω–µ–¥–µ–ª–∏*: *{top_name}* —Å –∫–∞—Ä–º–æ–π *{top_user[1]}* ‚≠ê\n" \
                     f"üòî *–ù–∞—Ä—É—à–∏—Ç–µ–ª—å –Ω–µ–¥–µ–ª–∏*: *{flop_name}* —Å –∫–∞—Ä–º–æ–π *{flop_user[1]}*",
                parse_mode='Markdown'
            )

# –ê–Ω—Ç–∏—Å–ø–∞–º —Å –¥—É—ç–ª—å—é –∏ –ª–∏–º–∏—Ç–æ–º
async def anti_spam(update: Update, context):
    message = update.message
    user_id = message.from_user.id
    chat_id = message.chat_id
    text = message.text.lower() if message.text else ""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    
    if 'chat_id' not in context.bot_data:
        context.bot_data['chat_id'] = chat_id
    
    for word in BANNED_WORDS:
        if word in text:
            await context.bot.delete_message(chat_id=chat_id, message_id=message.message_id)
            current_time = int(time.time())
            init_user_data(user_id, current_time)

            spam_count[user_id] += 1
            karma[user_id] -= 1
            logger.info(f"–°–ø–∞–º –æ—Ç {user_id}, —Å—á—ë—Ç: {spam_count[user_id]}, –∫–∞—Ä–º–∞: {karma[user_id]}")

            if spam_count[user_id] > MAX_SPAM_PER_DAY:
                await context.bot.restrict_chat_member(chat_id=chat_id, user_id=user_id, permissions={"can_send_messages": False}, until_date=current_time + 86400)
                msg = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üö® *{message.from_user.first_name}* –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç!\n" \
                         f"{get_spam_progress(spam_count[user_id], MAX_SPAM_PER_DAY)}\n" \
                         f"_–ú—É—Ç –Ω–∞ 24 —á–∞—Å–∞._ –ö–∞—Ä–º–∞: *{karma[user_id]}* ‚≠ê",
                    parse_mode='Markdown'
                )
                context.job_queue.run_once(delete_message, 300, data={'chat_id': msg.chat_id, 'message_id': msg.message_id})
                warnings[user_id] = 0
                return

            warnings[user_id] = warnings.get(user_id, 0) + 1
            warn_count = warnings[user_id]

            if warn_count == 1:
                await context.bot.restrict_chat_member(chat_id=chat_id, user_id=user_id, permissions={"can_send_messages": False}, until_date=current_time + 3600)
                question_data = random.choice(DUEL_QUESTIONS)
                keyboard = [[InlineKeyboardButton(text, callback_data=f"duel_{user_id}_{'correct' if correct else 'wrong'}")] for text, correct in question_data["options"]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                msg = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è *{message.from_user.first_name}*, –Ω–∞—Ä—É—à–µ–Ω–∏–µ!\n" \
                         f"{get_spam_progress(spam_count[user_id], MAX_SPAM_PER_DAY)}\n" \
                         f"_–ú—É—Ç –Ω–∞ 1 —á–∞—Å._ –ö–∞—Ä–º–∞: *{karma[user_id]}* ‚≠ê\n" \
                         f"–û—Ç–≤–µ—Ç—å:\n*{question_data['question']}*",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                context.user_data[user_id] = {'duel_message_id': msg.message_id}
            else:
                msg = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è *{message.from_user.first_name}*, –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞!\n" \
                         f"{get_spam_progress(spam_count[user_id], MAX_SPAM_PER_DAY)}\n" \
                         f"_–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warn_count}/3._ –ö–∞—Ä–º–∞: *{karma[user_id]}* ‚≠ê",
                    parse_mode='Markdown'
                )
                context.job_queue.run_once(delete_message, 300, data={'chat_id': msg.chat_id, 'message_id': msg.message_id})
                if warn_count >= 3:
                    await context.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
                    msg = await context.bot.send_message(
                        chat_id=chat_id,
                        text=f"üö´ *{message.from_user.first_name}* –∑–∞–±–∞–Ω–µ–Ω!\n–ö–∞—Ä–º–∞: *{karma[user_id]}* ‚≠ê",
                        parse_mode='Markdown'
                    )
                    context.job_queue.run_once(delete_message, 300, data={'chat_id': msg.chat_id, 'message_id': msg.message_id})
                    warnings[user_id] = 0
            break

# –ö–æ–º–∞–Ω–¥–∞ /report –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async def report_command(update: Update, context):
    if not update.message.reply_to_message:
        await update.message.reply_text("üì© –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è!", parse_mode='Markdown')
        return
    reporter = update.effective_user
    target_user = update.message.reply_to_message.from_user
    reason = " ".join(context.args) if context.args else "–Ω–∞—Ä—É—à–µ–Ω–∏–µ"
    chat_id = update.effective_chat.id

    keyboard = [
        [InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"report_ban_{target_user.id}"),
         InlineKeyboardButton("‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"report_ignore_{target_user.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    msg = await context.bot.send_message(
        chat_id=chat_id,
        text=f"üö® *–ñ–∞–ª–æ–±–∞ –æ—Ç {reporter.first_name}* –Ω–∞ *{target_user.first_name}*!\n" \
             f"–ü—Ä–∏—á–∏–Ω–∞: _{reason}_\n–ê–¥–º–∏–Ω—ã, —á—Ç–æ –¥–µ–ª–∞—Ç—å?",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    context.user_data[target_user.id] = {'report_message_id': msg.message_id}

# –ö–æ–º–∞–Ω–¥–∞ /karma
async def karma_command(update: Update, context):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    member = await context.bot.get_chat_member(chat_id, user_id)

    if member.status in ['administrator', 'creator'] and len(context.args) >= 2:
        try:
            target_username = context.args[0].lstrip('@')
            change = int(context.args[1])
            target_member = next((m for m in await update.effective_chat.get_members() if m.user.username == target_username), None)
            if not target_member:
                await update.message.reply_text("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", parse_mode='Markdown')
                return
            target_id = target_member.user.id
            karma[target_id] = karma.get(target_id, 0) + change
            await update.message.reply_text(
                f"‚≠ê –ö–∞—Ä–º–∞ *{target_member.user.first_name}* –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *{change}*. –¢–µ–ø–µ—Ä—å: *{karma[target_id]}* ‚≠ê",
                parse_mode='Markdown'
            )
        except ValueError:
            await update.message.reply_text("üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /karma @username +1 –∏–ª–∏ -1", parse_mode='Markdown')
    else:
        karma_value = karma.get(user_id, 0)
        await update.message.reply_text(f"‚≠ê –¢–≤–æ—è –∫–∞—Ä–º–∞, *{update.effective_user.first_name}*: *{karma_value}* ‚≠ê", parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /warn –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def warn_user(update: Update, context):
    member = await update.effective_chat.get_member(update.effective_user.id)
    if member.status not in ['administrator', 'creator']:
        await update.message.reply_text("üîß –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.", parse_mode='Markdown')
        return
    if not update.message.reply_to_message:
        await update.message.reply_text("üì© –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.", parse_mode='Markdown')
        return
    target_user = update.message.reply_to_message.from_user
    user_id = target_user.id
    reason = " ".join(context.args) if context.args else "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
    keyboard = [[InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ban_{user_id}"), InlineKeyboardButton("‚úÖ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{user_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    msg = await update.message.reply_text(
        f"‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ *{target_user.first_name}*.\n–ü—Ä–∏—á–∏–Ω–∞: _{reason}_\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    context.user_data[user_id] = {'warn_message_id': msg.message_id}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()
    data_parts = query.data.split('_')
    action = data_parts[0]
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    member = await context.bot.get_chat_member(chat_id, user_id)

    if action in ["ban", "cancel", "report"]:
        target_id = int(data_parts[2]) if action == "report" else int(data_parts[1])
        is_admin = member.status in ['administrator', 'creator']

        if not is_admin:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ-–∞–¥–º–∏–Ω—É
            await context.bot.send_message(
                chat_id=user_id,
                text="üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!",
                parse_mode='Markdown'
            )
            return

        # –î–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞
        if action == "ban" or (action == "report" and data_parts[1] == "ban"):
            await context.bot.ban_chat_member(chat_id=chat_id, user_id=target_id)
            await query.edit_message_text(f"üö´ –ó–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º *{query.from_user.first_name}*.", parse_mode='Markdown')
            warnings[target_id] = 0
        elif action == "cancel" or (action == "report" and data_parts[1] == "ignore"):
            await query.edit_message_text("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", parse_mode='Markdown')

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞
        key = 'report_message_id' if action == "report" else 'warn_message_id'
        if target_id in context.user_data and key in context.user_data[target_id]:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=context.user_data[target_id][key])
            except TelegramError as e:
                logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            del context.user_data[target_id]

    elif action == "duel":
        user_id = int(data_parts[1])
        result = data_parts[2]
        if result == "correct":
            warnings[user_id] = 0
            await context.bot.restrict_chat_member(chat_id=chat_id, user_id=user_id, permissions={"can_send_messages": True})
            await query.edit_message_text(f"‚úÖ *{query.from_user.first_name}*, –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ú—É—Ç —Å–Ω—è—Ç.\n–ö–∞—Ä–º–∞: *{karma[user_id]}* ‚≠ê", parse_mode='Markdown')
        else:
            warnings[user_id] = 2
            await query.edit_message_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ú—É—Ç –Ω–∞ 1 —á–∞—Å.\n–ö–∞—Ä–º–∞: *{karma[user_id]}* ‚≠ê", parse_mode='Markdown')
        if user_id in context.user_data and 'duel_message_id' in context.user_data[user_id]:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=context.user_data[user_id]['duel_message_id'])
            except TelegramError as e:
                logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥—É—ç–ª—å: {e}")
            del context.user_data[user_id]

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, greet_new_member))
    application.add_handler(CommandHandler("rules", rules))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("karma", karma_command))
    application.add_handler(CommandHandler("warn", warn_user))
    application.add_handler(CommandHandler("report", report_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, anti_spam))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.job_queue.run_repeating(reset_spam_count, interval=86400, first=0)
    application.run_polling()

if __name__ == '__main__':
    main()